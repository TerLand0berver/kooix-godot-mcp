name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  packages: write

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x, 21.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Build project
      run: npm run build
      
    - name: Run tests
      run: npm test
      
    - name: Test CLI functionality
      run: |
        node dist/index.js --help
        echo "Testing basic MCP functionality..."
        timeout 10s node dist/index.js --project . || true

  security-audit:
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      
    - name: Check for vulnerabilities
      run: npm audit --audit-level=high --production

  publish-npm:
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-audit]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
    - name: Verify package version
      run: |
        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        TAG_VERSION="${{ steps.version.outputs.VERSION }}"
        echo "Package version: $PACKAGE_VERSION"
        echo "Tag version: $TAG_VERSION"
        if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
          echo "Version mismatch! Updating package.json..."
          npm version $TAG_VERSION --no-git-tag-version
        else
          echo "Versions match, proceeding..."
        fi
      
    - name: Publish to NPM
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ steps.version.outputs.VERSION }}
        body: |
          ## What's Changed
          
          - Updated to version ${{ steps.version.outputs.VERSION }}
          - See [CHANGELOG.md](./CHANGELOG.md) for detailed changes
          
          ## Installation
          
          ```bash
          npm install -g kooix-godot-mcp@${{ steps.version.outputs.VERSION }}
          ```
          
          ## Usage
          
          ```bash
          # Add to Claude Desktop
          claude mcp add godot-mcp kooix-godot-mcp
          
          # Or use directly
          godot-mcp --project /path/to/godot/project
          ```
          
          Generated with ðŸš€ Claude Code
        draft: false
        prerelease: false

  publish-github-packages:
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-audit]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        registry-url: 'https://npm.pkg.github.com'
        cache: 'npm'
        
    - name: Configure GitHub Packages
      run: |
        echo "@telagod:registry=https://npm.pkg.github.com" >> ~/.npmrc
        echo "//npm.pkg.github.com/:_authToken=${NODE_AUTH_TOKEN}" >> ~/.npmrc
      env:
        NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Update package name for GitHub Packages
      run: |
        sed -i 's/"name": "kooix-godot-mcp"/"name": "@telagod\/kooix-godot-mcp"/' package.json
        
    - name: Verify .npmrc configuration
      run: |
        echo "Current .npmrc content:"
        cat ~/.npmrc
        echo "Package name after modification:"
        grep '"name"' package.json
        
    - name: Publish to GitHub Packages
      run: npm publish --registry=https://npm.pkg.github.com
      env:
        NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}